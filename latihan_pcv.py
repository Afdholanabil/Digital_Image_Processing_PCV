# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pcv.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import typing
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QWidget, QPushButton,QFileDialog, QDialog
from PyQt5.QtGui import QPixmap, QColor, QImage, qRgb
from PyQt5.QtCore import Qt
import cv2
from matplotlib.image import imread
import matplotlib.image as mpimg 
from matplotlib import pyplot as plt
import numpy as np
from PIL import Image, ImageQt
from random import randint
from window_penjumlahan import Ui_ao_penjumlahan
from window_pengurangan import Ui_ao_pengurangan
from window_perkalian import Ui_Ui_ao_perkalian
from window_pembagian import Ui_ao_pembagian
from window_AND import Ui_ao_AND
from window_OR import Ui_ao_OR
from window_NOT import Ui_ao_NOT


class Ui_WijangNabil(object):

    def openWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_ao_penjumlahan()
        self.ui.setupUi(self.window)
        self.window.show()
    
    def openWindowPengurangan(self):
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_pengurangan()
        self.ui.setupUi(self.window2)
        self.window2.show()

    def openWindowPerkalian(self):
        self.window3 = QtWidgets.QMainWindow()
        self.ui = Ui_Ui_ao_perkalian()
        self.ui.setupUi(self.window3)
        self.window3.show()

    def openWindowPembagian(self):
        self.window4 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_pembagian()
        self.ui.setupUi(self.window4)
        self.window4.show()
    
    def openWindowAND(self):
        self.window5 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_AND()
        self.ui.setupUi(self.window5)
        self.window5.show()

    def openWindowOR(self):
        self.window6 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_OR()
        self.ui.setupUi(self.window6)
        self.window6.show()

    def openWindowNOT(self):
        self.window7 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_NOT()
        self.ui.setupUi(self.window7)
        self.window7.show()


    def setupUi(self, WijangNabil):
        WijangNabil.setObjectName("WijangNabil")
        WijangNabil.resize(1266, 1164)
        WijangNabil.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        WijangNabil.setMouseTracking(False)
        self.centralwidget = QtWidgets.QWidget(WijangNabil)
        self.centralwidget.setObjectName("centralwidget")
        self.LbInput = QtWidgets.QLabel(self.centralwidget)
        self.LbInput.setGeometry(QtCore.QRect(20, 40, 1231, 481))
        self.LbInput.setFrameShape(QtWidgets.QFrame.Box)
        self.LbInput.setText("")
        self.LbInput.setObjectName("LbInput")
        self.LbOutput = QtWidgets.QLabel(self.centralwidget)
        self.LbOutput.setGeometry(QtCore.QRect(20, 610, 1231, 481))
        self.LbOutput.setFrameShape(QtWidgets.QFrame.Box)
        self.LbOutput.setText("")
        self.LbOutput.setObjectName("LbOutput")

        self.path_img = QtWidgets.QLabel(self.centralwidget)
        self.path_img.setGeometry(QtCore.QRect(20, 530, 541, 41))
        self.path_img.setFrameShape(QtWidgets.QFrame.Box)
        self.path_img.setText("")

        self.path_img.setObjectName("path_img")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 10, 211, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 580, 211, 16))
        self.label_4.setObjectName("label_4")
        WijangNabil.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(WijangNabil)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1266, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAritmathical_Operation = QtWidgets.QMenu(self.menubar)
        self.menuAritmathical_Operation.setObjectName("menuAritmathical_Operation")
        self.menuGeometric_Operation = QtWidgets.QMenu(self.menubar)
        self.menuGeometric_Operation.setObjectName("menuGeometric_Operation")
        self.menuFlip = QtWidgets.QMenu(self.menuGeometric_Operation)
        self.menuFlip.setObjectName("menuFlip")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuColors = QtWidgets.QMenu(self.menubar)
        self.menuColors.setObjectName("menuColors")
        self.menuRGB_to_Grayscale = QtWidgets.QMenu(self.menuColors)
        self.menuRGB_to_Grayscale.setObjectName("menuRGB_to_Grayscale")
        self.menuBit_Depth = QtWidgets.QMenu(self.menuColors)
        self.menuBit_Depth.setObjectName("menuBit_Depth")
        self.menuImage_Processing = QtWidgets.QMenu(self.menubar)
        self.menuImage_Processing.setObjectName("menuImage_Processing")
        self.menuKonvolusi = QtWidgets.QMenu(self.menubar)
        self.menuKonvolusi.setObjectName("menuKonvolusi")
        self.menuEdgeD = QtWidgets.QMenu(self.menuKonvolusi)
        self.menuEdgeD.setObjectName("menuEdgeD")
        self.menuSegmentasi_Citra = QtWidgets.QMenu(self.menubar)
        self.menuSegmentasi_Citra.setObjectName("menuSegmentasi_Citra")
        self.menuROI = QtWidgets.QMenu(self.menubar)
        self.menuROI.setObjectName("menuROI")
        WijangNabil.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(WijangNabil)
        self.statusbar.setObjectName("statusbar")
        WijangNabil.setStatusBar(self.statusbar)

        self.actionOpen = QtWidgets.QAction(WijangNabil)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.open_folder2)

        self.actionSave_As = QtWidgets.QAction(WijangNabil)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionSave_As.triggered.connect(self.saveImage)

        self.actionExit = QtWidgets.QAction(WijangNabil)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(self.exitProgram)


        self.actionPenjumlahan = QtWidgets.QAction(WijangNabil)
        self.actionPenjumlahan.setObjectName("actionPenjumlahan")
        self.actionPenjumlahan.triggered.connect(self.openWindow)

        self.actionPengurangan = QtWidgets.QAction(WijangNabil)
        self.actionPengurangan.setObjectName("actionPengurangan")
        self.actionPengurangan.triggered.connect(self.openWindowPengurangan)


        self.actionPerkalian = QtWidgets.QAction(WijangNabil)
        self.actionPerkalian.setObjectName("actionPerkalian")
        self.actionPerkalian.triggered.connect(self.openWindowPerkalian)


        self.actionPembagian = QtWidgets.QAction(WijangNabil)
        self.actionPembagian.setObjectName("actionPembagian")
        self.actionPembagian.triggered.connect(self.openWindowPembagian)


        self.actionAND = QtWidgets.QAction(WijangNabil)
        self.actionAND.setObjectName("actionAND")
        self.actionAND.triggered.connect(self.openWindowAND)
      
        self.actionOR = QtWidgets.QAction(WijangNabil)
        self.actionOR.setObjectName("actionOR")
        self.actionOR.triggered.connect(self.openWindowOR)

        self.actionNOT = QtWidgets.QAction(WijangNabil)
        self.actionNOT.setObjectName("actionNOT")
        self.actionNOT.triggered.connect(self.openWindowNOT)

        self.actionScaling_Uniform = QtWidgets.QAction(WijangNabil)
        self.actionScaling_Uniform.setObjectName("actionScaling_Uniform")
        self.actionScaling_Non_Uniform = QtWidgets.QAction(WijangNabil)
        self.actionScaling_Non_Uniform.setObjectName("actionScaling_Non_Uniform")
        self.actionCroping = QtWidgets.QAction(WijangNabil)
        self.actionCroping.setObjectName("actionCroping")
        self.actionCroping.triggered.connect(self.openCrop)

        self.actionHorizontal = QtWidgets.QAction(WijangNabil)
        self.actionHorizontal.setObjectName("actionHorizontal")
        self.actionHorizontal.triggered.connect(self.flipHorizontal)

        self.actionVertical = QtWidgets.QAction(WijangNabil)
        self.actionVertical.setObjectName("actionVertical")
        self.actionVertical.triggered.connect(self.flipVertical)

        self.actionTranslasi = QtWidgets.QAction(WijangNabil)
        self.actionTranslasi.setObjectName("actionTranslasi")
        self.actionRotation = QtWidgets.QAction(WijangNabil)
        self.actionRotation.setObjectName("actionRotation")
        self.actionRotation.triggered.connect(self.rotate_image)

        self.actionHistogram_Input = QtWidgets.QAction(WijangNabil)
        self.actionHistogram_Input.setObjectName("actionHistogram_Input")
        self.actionHistogram_Input.triggered.connect(self.show_image_histogram)

        self.actionHistogram_Output = QtWidgets.QAction(WijangNabil)
        self.actionHistogram_Output.setObjectName("actionHistogram_Output")
        self.actionHistogram_Output.triggered.connect(self.show_image_histogram_Output)

        self.actionHistogram_Output_2 = QtWidgets.QAction(WijangNabil)
        self.actionHistogram_Output_2.setObjectName("actionHistogram_Output_2")
        self.actionHistogram_Output_2.triggered.connect(self.show_image_histogram_Input_Output)

        self.actionAverage = QtWidgets.QAction(WijangNabil)
        self.actionAverage.setObjectName("actionAverage")
        self.actionAverage.triggered.connect(self.changeAverage)

        self.actionLightness = QtWidgets.QAction(WijangNabil)
        self.actionLightness.setObjectName("actionLightness")
        self.actionLightness.triggered.connect(self.changeLightness)

        self.actionLuminance = QtWidgets.QAction(WijangNabil)
        self.actionLuminance.setObjectName("actionLuminance")
        self.actionLuminance.triggered.connect(self.changeLuminance)

        self.actionBrightness = QtWidgets.QAction(WijangNabil)
        self.actionBrightness.setObjectName("actionBrightness")
        self.actionBrightness.triggered.connect(self.openBrightness)

        self.actionContrast = QtWidgets.QAction(WijangNabil)
        self.actionContrast.setObjectName("actionContrast")
        self.actionContrast.triggered.connect(self.openContrast)

        self.actionContrastBrightness = QtWidgets.QAction(WijangNabil)
        self.actionContrastBrightness.setObjectName("actionContrast")
        self.actionContrastBrightness.triggered.connect(self.open_brightness_contrast_dialog)

        self.actionInvers = QtWidgets.QAction(WijangNabil)
        self.actionInvers.setObjectName("actionInvers")
        self.actionInvers.triggered.connect(self.changeInvert)

        self.action1_Bit = QtWidgets.QAction(WijangNabil)
        self.action1_Bit.setObjectName("action1_Bit")
        self.action1_Bit.triggered.connect(self.changeBitDepth1)

        self.action2_Bit = QtWidgets.QAction(WijangNabil)
        self.action2_Bit.setObjectName("action2_Bit")
        self.action2_Bit.triggered.connect(lambda:self.changeBitDepth(2))

        self.action3_Bit = QtWidgets.QAction(WijangNabil)
        self.action3_Bit.setObjectName("action3_Bit")
        self.action3_Bit.triggered.connect(lambda:self.changeBitDepth(3))
        self.action4_Bit = QtWidgets.QAction(WijangNabil)
        self.action4_Bit.setObjectName("action4_Bit")
        self.action4_Bit.triggered.connect(lambda:self.changeBitDepth(4))
        self.action5_Bit = QtWidgets.QAction(WijangNabil)
        self.action5_Bit.setObjectName("action5_Bit")
        self.action5_Bit.triggered.connect(lambda:self.changeBitDepth(5))

        self.action6_Bit = QtWidgets.QAction(WijangNabil)
        self.action6_Bit.setObjectName("action6_Bit")
        self.action6_Bit.triggered.connect(lambda:self.changeBitDepth(6))
        self.action7_Bit = QtWidgets.QAction(WijangNabil)
        self.action7_Bit.setObjectName("action7_Bit")
        self.action7_Bit.triggered.connect(lambda:self.changeBitDepth(7))
        self.action8_Bit = QtWidgets.QAction(WijangNabil)
        self.action8_Bit.setObjectName("action8_Bit")
        self.action8_Bit.triggered.connect(lambda:self.changeBitDepth(8))
        self.actionHistogram_Equalization = QtWidgets.QAction(WijangNabil)
        self.actionHistogram_Equalization.setObjectName("actionHistogram_Equalization")
        self.actionHistogram_Equalization.triggered.connect(self.changeHistogramEqu)

        self.actionFuzzy_HE = QtWidgets.QAction(WijangNabil)
        self.actionFuzzy_HE.setObjectName("actionFuzzy_HE")
        self.actionFuzzy_HE.triggered.connect(self.changeFuzzyRGB)

        self.actionFuzzy_HE_Grayscale = QtWidgets.QAction(WijangNabil)
        self.actionFuzzy_HE_Grayscale.setObjectName("actionFuzzy_HE_Grayscale")
        self.actionFuzzy_HE_Grayscale.triggered.connect(self.changeFuzzyGray)

        #KONVOLUSI        
        self.actionLowPass = QtWidgets.QAction(WijangNabil)
        self.actionLowPass.setObjectName("actionLowPassFilter")
        self.actionLowPass.triggered.connect(self.open_folder2)
        
        self.actionHighPass = QtWidgets.QAction(WijangNabil)
        self.actionHighPass.setObjectName("actionHighPassFilter")
        self.actionHighPass.triggered.connect(self.open_folder2)
        
        self.actionIdentity = QtWidgets.QAction(WijangNabil)
        self.actionIdentity.setObjectName("actionIdentity")
        self.actionIdentity.triggered.connect(self.open_folder2)
        
        self.actionSharpen = QtWidgets.QAction(WijangNabil)
        self.actionSharpen.setObjectName("actionSharpen")
        self.actionSharpen.triggered.connect(self.open_folder2)
        
        self.actionGausian3x3 = QtWidgets.QAction(WijangNabil)
        self.actionGausian3x3.setObjectName("actionGausian3x3")
        self.actionGausian3x3.triggered.connect(self.open_folder2)

        self.actionGausian5x5 = QtWidgets.QAction(WijangNabil)
        self.actionGausian5x5.setObjectName("actionGausian5x5")
        self.actionGausian5x5.triggered.connect(self.open_folder2)

        self.actionUnsharpMasking = QtWidgets.QAction(WijangNabil)
        self.actionUnsharpMasking.setObjectName("actionUnsharpMasking")
        self.actionUnsharpMasking.triggered.connect(self.open_folder2)

        #edge detection
        self.actionRobert = QtWidgets.QAction(WijangNabil)
        self.actionRobert.setObjectName("actionRobert")
        self.actionRobert.triggered.connect(self.open_folder2)

        self.actionSobel = QtWidgets.QAction(WijangNabil)
        self.actionSobel.setObjectName("actionSobel")
        self.actionSobel.triggered.connect(self.open_folder2)

        self.actionPrewit = QtWidgets.QAction(WijangNabil)
        self.actionPrewit.setObjectName("actionPrewit")
        self.actionPrewit.triggered.connect(self.open_folder2)

        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuAritmathical_Operation.addAction(self.actionPenjumlahan)
        self.menuAritmathical_Operation.addAction(self.actionPengurangan)
        self.menuAritmathical_Operation.addAction(self.actionPerkalian)
        self.menuAritmathical_Operation.addAction(self.actionPembagian)
        self.menuAritmathical_Operation.addAction(self.actionAND)
        self.menuAritmathical_Operation.addAction(self.actionOR)
        self.menuAritmathical_Operation.addAction(self.actionNOT)
        self.menuFlip.addAction(self.actionHorizontal)
        self.menuFlip.addAction(self.actionVertical)
        self.menuGeometric_Operation.addAction(self.actionScaling_Uniform)
        self.menuGeometric_Operation.addAction(self.actionScaling_Non_Uniform)
        self.menuGeometric_Operation.addAction(self.actionCroping)
        self.menuGeometric_Operation.addAction(self.menuFlip.menuAction())
        self.menuGeometric_Operation.addAction(self.actionTranslasi)
        self.menuGeometric_Operation.addAction(self.actionRotation)
        self.menuView.addAction(self.actionHistogram_Input)
        self.menuView.addAction(self.actionHistogram_Output)
        self.menuView.addAction(self.actionHistogram_Output_2)
        self.menuRGB_to_Grayscale.addAction(self.actionAverage)
        self.menuRGB_to_Grayscale.addAction(self.actionLightness)
        self.menuRGB_to_Grayscale.addAction(self.actionLuminance)
        self.menuBit_Depth.addAction(self.action1_Bit)
        self.menuBit_Depth.addAction(self.action2_Bit)
        self.menuBit_Depth.addAction(self.action3_Bit)
        self.menuBit_Depth.addAction(self.action4_Bit)
        self.menuBit_Depth.addAction(self.action5_Bit)
        self.menuBit_Depth.addAction(self.action6_Bit)
        self.menuBit_Depth.addAction(self.action7_Bit)
        self.menuBit_Depth.addAction(self.action8_Bit)
        self.menuColors.addAction(self.menuRGB_to_Grayscale.menuAction())
        self.menuColors.addAction(self.actionBrightness)
        self.menuColors.addAction(self.actionContrast)
        self.menuColors.addAction(self.actionContrastBrightness)
        self.menuColors.addAction(self.actionInvers)
        self.menuColors.addAction(self.menuBit_Depth.menuAction())
        self.menuImage_Processing.addAction(self.actionHistogram_Equalization)
        self.menuImage_Processing.addAction(self.actionFuzzy_HE)
        self.menuImage_Processing.addAction(self.actionFuzzy_HE_Grayscale)
        self.menuKonvolusi.addAction(self.actionLowPass)
        self.menuKonvolusi.addAction(self.actionHighPass)
        self.menuKonvolusi.addAction(self.actionIdentity)
        self.menuKonvolusi.addAction(self.menuEdgeD.menuAction())
        self.menuEdgeD.addAction(self.actionRobert)
        self.menuEdgeD.addAction(self.actionSobel)
        self.menuEdgeD.addAction(self.actionPrewit)
        self.menuKonvolusi.addAction(self.actionSharpen)
        self.menuKonvolusi.addAction(self.actionGausian3x3)
        self.menuKonvolusi.addAction(self.actionGausian5x5)
        self.menuKonvolusi.addAction(self.actionUnsharpMasking)
        
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAritmathical_Operation.menuAction())
        self.menubar.addAction(self.menuGeometric_Operation.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuColors.menuAction())
        self.menubar.addAction(self.menuImage_Processing.menuAction())
        self.menubar.addAction(self.menuKonvolusi.menuAction())
        self.menubar.addAction(self.menuSegmentasi_Citra.menuAction())
        self.menubar.addAction(self.menuROI.menuAction())

        self.retranslateUi(WijangNabil)
        QtCore.QMetaObject.connectSlotsByName(WijangNabil)

    def retranslateUi(self, WijangNabil):
        _translate = QtCore.QCoreApplication.translate
        WijangNabil.setWindowTitle(_translate("WijangNabil", "PCV"))
        self.label_3.setText(_translate("WijangNabil", "Image Input :"))
        self.label_4.setText(_translate("WijangNabil", "Image Output :"))
        self.menuFile.setTitle(_translate("WijangNabil", "File"))
        self.menuAritmathical_Operation.setTitle(_translate("WijangNabil", "Aritmathical Operation"))
        self.menuGeometric_Operation.setTitle(_translate("WijangNabil", "Geometric Operation"))
        self.menuFlip.setTitle(_translate("WijangNabil", "Flip"))
        self.menuView.setTitle(_translate("WijangNabil", "View"))
        self.menuColors.setTitle(_translate("WijangNabil", "Colors"))
        self.menuRGB_to_Grayscale.setTitle(_translate("WijangNabil", "RGB to Grayscale"))
        self.menuBit_Depth.setTitle(_translate("WijangNabil", "Bit Depth"))
        self.menuImage_Processing.setTitle(_translate("WijangNabil", "Image Processing"))
        self.menuKonvolusi.setTitle(_translate("WijangNabil", "Konvolusi"))
        self.menuSegmentasi_Citra.setTitle(_translate("WijangNabil", "Segmentasi Citra"))
        self.menuROI.setTitle(_translate("WijangNabil", "ROI"))
        self.actionOpen.setText(_translate("WijangNabil", "Open"))
        self.actionSave_As.setText(_translate("WijangNabil", "Save As"))
        self.actionExit.setText(_translate("WijangNabil", "Exit"))
        self.actionPenjumlahan.setText(_translate("WijangNabil", "Penjumlahan"))
        self.actionPengurangan.setText(_translate("WijangNabil", "Pengurangan"))
        self.actionPerkalian.setText(_translate("WijangNabil", "Perkalian"))
        self.actionPembagian.setText(_translate("WijangNabil", "Pembagian"))
        self.actionAND.setText(_translate("WijangNabil", "AND"))
        self.actionOR.setText(_translate("WijangNabil", "OR"))
        self.actionNOT.setText(_translate("WijangNabil", "NOT"))
        self.actionScaling_Uniform.setText(_translate("WijangNabil", "Scaling Uniform"))
        self.actionScaling_Non_Uniform.setText(_translate("WijangNabil", "Scaling Non-Uniform"))
        self.actionCroping.setText(_translate("WijangNabil", "Croping"))
        self.actionHorizontal.setText(_translate("WijangNabil", "Horizontal"))
        self.actionVertical.setText(_translate("WijangNabil", "Vertical"))
        self.actionTranslasi.setText(_translate("WijangNabil", "Translasi"))
        self.actionRotation.setText(_translate("WijangNabil", "Rotation"))
        self.actionHistogram_Input.setText(_translate("WijangNabil", "Histogram Input"))
        self.actionHistogram_Output.setText(_translate("WijangNabil", "Histogram Output"))
        self.actionHistogram_Output_2.setText(_translate("WijangNabil", "Histogram Output"))
        self.actionAverage.setText(_translate("WijangNabil", "Average"))
        self.actionLightness.setText(_translate("WijangNabil", "Lightness"))
        self.actionLuminance.setText(_translate("WijangNabil", "Luminance"))
        self.actionBrightness.setText(_translate("WijangNabil", "Brightness"))
        self.actionContrast.setText(_translate("WijangNabil", "Contrast"))
        self.actionContrastBrightness.setText(_translate("WijangNabil", "Contrast-Brightness"))


        self.actionInvers.setText(_translate("WijangNabil", "Invers"))
        self.action1_Bit.setText(_translate("WijangNabil", "1 Bit"))
        self.action2_Bit.setText(_translate("WijangNabil", "2 Bit"))
        self.action3_Bit.setText(_translate("WijangNabil", "3 Bit"))
        self.action4_Bit.setText(_translate("WijangNabil", "4 Bit"))
        self.action5_Bit.setText(_translate("WijangNabil", "5 Bit"))
        self.action6_Bit.setText(_translate("WijangNabil", "6 Bit"))
        self.action7_Bit.setText(_translate("WijangNabil", "7 Bit"))
        self.action8_Bit.setText(_translate("WijangNabil", "8 Bit"))
        self.actionHistogram_Equalization.setText(_translate("WijangNabil", "Histogram Equalization"))
        self.actionFuzzy_HE.setText(_translate("WijangNabil", "Fuzzy HE RGB"))
        self.actionFuzzy_HE_Grayscale.setText(_translate("WijangNabil", "Fuzzy HE Grayscale"))

        #konvolusi
        self.actionLowPass.setText(_translate("WijangNabil", "Low Pass Filter"))
        self.actionHighPass.setText(_translate("WijangNabil", "High Pass Filter"))
        self.actionIdentity.setText(_translate("WijangNabil", "Identity"))
        self.menuEdgeD.setTitle(_translate("WijangNabil", "Edge Detection"))
        self.actionRobert.setText(_translate("WijangNabil", "Robert"))
        self.actionSobel.setText(_translate("WijangNabil", "Sobel"))
        self.actionPrewit.setText(_translate("WijangNabil", "Prewit"))
        self.actionSharpen.setText(_translate("WijangNabil", "Sharpen"))
        self.actionGausian3x3.setText(_translate("WijangNabil", "Gausian Blur 3x3"))
        self.actionGausian5x5.setText(_translate("WijangNabil", "Gausian Blur 5x5"))
        self.actionUnsharpMasking.setText(_translate("WijangNabil", "Unsharp Masking"))

    
    def open_folder2(self):
        options = QFileDialog.Options()
        options = QFileDialog.ReadOnly
        self.LbOutput.clear()

        file_name, _ = QFileDialog.getOpenFileName(None,"Open Image File","",
                                                "Images(*.png *.jpg *jpeg);;All Files(*)", options=options)
        if file_name:
            image = QtGui.QImage(file_name)
            if not image.isNull():
                pixmap = QtGui.QPixmap.fromImage(image)
                self.LbInput.setPixmap(pixmap)
                self.path_img.setText(file_name)
                self.LbInput.setScaledContents(True)
    
    def show_image_histogram_Output(self):
        file_name = self.LbOutput.pixmap()
        
        if file_name:
            image = QtGui.QImage(file_name)
            if not image.isNull():
               
                image_np = self.qimage_to_ndarray(image)
                plt.figure()
                plt.hist(image_np.ravel(), bins=256, range=(0, 256), density=True, color='black', alpha=0.7)
                plt.xlabel('Pixel Value')
                plt.ylabel('Normalized Frequency')
                plt.title('Histogram Gambar')
                plt.show()
    
    def show_image_histogram(self):
        file_name = self.LbInput.pixmap()
        
        if file_name:
            image = QtGui.QImage(file_name)
            if not image.isNull():
               
                image_np = self.qimage_to_ndarray(image)
                plt.figure()
                plt.hist(image_np.ravel(), bins=256, range=(0, 256), density=True, color='black', alpha=0.7)
                plt.xlabel('Pixel Value')
                plt.ylabel('Normalized Frequency')
                plt.title('Histogram Gambar')
                plt.show()
    
    def show_image_histogram_Input_Output(self):
        file_name = self.LbInput.pixmap()
        file_name2 = self.LbOutput.pixmap()
        
        if file_name and file_name2:
            image = QtGui.QImage(file_name)
            image2 = QtGui.QImage(file_name2)

            if image  and image is not None :
               
                image_np = self.qimage_to_ndarray(image)
                image_np2 = self.qimage_to_ndarray(image2)
                plt.figure()
                plt.hist(image_np.ravel(), bins=256, range=(0, 256), density=True, color='black', alpha=0.7)
                plt.xlabel('Pixel Value')
                plt.ylabel('Normalized Frequency')
                plt.title('Histogram Gambar')

                plt.figure()
                plt.hist(image_np2.ravel(), bins=256, range=(0, 256), density=True, color='black', alpha=0.7)
                plt.xlabel('Pixel Value')
                plt.ylabel('Normalized Frequency')
                plt.title('Histogram Gambar')
                plt.show()

    def qimage_to_ndarray(self, qimage):
        """
        Konversi QImage ke larik NumPy.
        """
        width = qimage.width()
        height = qimage.height()

        ptr = qimage.bits()
        ptr.setsize(height * width * 4)
        arr = np.frombuffer(ptr, np.uint8).reshape((height, width, 4))

        # Mengabaikan channel alpha (RGBA), jika ada
        if arr.shape[2] == 4:
            arr = arr[:, :, :3]

        print(arr)    

        return arr
    
    def changeLuminance(self):
        pixmap = self.LbInput.pixmap()

        if pixmap :
            img = pixmap.toImage()
            
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel),QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    gamma = 1.04
                    luminance = int(0.299 * r  + 0.587 * g  + 0.114 * b )
                    img.setPixel(x,y, qRgb(luminance, luminance, luminance))

            luminance_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(luminance_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = luminance_pixmap

    def changeAverage(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel),QtGui.qGreen(pixel),  QtGui.qBlue(pixel)
                    konstanta = 3
                    average = (r+g+b) // konstanta
                    img.setPixel(x, y, qRgb(average,average,average))
            
            average_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(average_pixmap)
            self.LbOutput.setScaledContents(True)                                                
            self.displayed_pixmap = average_pixmap
    
    def changeLightness(self):
        pixmap = self.LbInput.pixmap()
        if pixmap :
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x, y)
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    konstanta = 2
                    lightness = (max(r,g,b) + min(r,g,b)) // konstanta
                    img.setPixel(x,y,qRgb(lightness,lightness,lightness))
            
            lightness_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(lightness_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = lightness_pixmap

    def changeInvert(self):
        pixmap = self.LbInput.pixmap()
        if pixmap: 
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    invert = qRgb(255 - r, 255-g, 255-b)
                    img.setPixel(x,y,invert)
            
            invert_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(invert_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = invert_pixmap
    
    def openBrightness(self):
        nilai_brightness, ok1 = QtWidgets.QInputDialog.getInt(None, "Brightness", "Masukan brightness (-255 to 255):", 0, -255, 255)

        if ok1:
            # Apply brightness and contrast adjustments
            self.changeBrightness(nilai_brightness)

    def changeBrightness(self, nilai_brightness):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    kons_bright = 100
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    new_r = min(255, int(r * kons_bright))
                    new_g = min(255, int(g * kons_bright))
                    new_b = min(255, int(b * kons_bright))
                    brightness = QColor(new_r , new_g , new_b ).rgba()
                    img.setPixel(x,y,brightness)

        brightness_pixmap = QPixmap.fromImage(img)
        self.LbOutput.setPixmap(brightness_pixmap)
        self.LbOutput.setScaledContents(True)
        self.displayed_pixmap = brightness_pixmap

    def openContrast(self):
        nilai_contrast, ok2 = QtWidgets.QInputDialog.getDouble(None, "Contrast", "Masukan contrast (0.01 to 4.0):", 1.0, 0.01, 4.0)

        if ok2:
            # Apply brightness and contrast adjustments
            self.changeContrast(nilai_contrast)

    def changeContrast(self, nilai_contrast):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixelColor = QColor(img.pixel(x,y))

                    rata_rata = (pixelColor.red() + pixelColor.green() + pixelColor.blue()) //3

                    delta_r = pixelColor.red() - rata_rata
                    delta_g = pixelColor.green() - rata_rata
                    delta_b = pixelColor.blue() - rata_rata 

                    

                    new_r = int(rata_rata + nilai_contrast * delta_r)
                    new_g = int(rata_rata + nilai_contrast * delta_g)
                    new_b = int(rata_rata + nilai_contrast * delta_b)
                    
                    new_r = max(0, min(255, new_r))
                    new_g = max(0, min(255, new_g))
                    new_b = max(0, min(255, new_b))

                    pixelColor.setRed(new_r)
                    pixelColor.setGreen(new_g)
                    pixelColor.setBlue(new_b)

                    img.setPixel(x,y,pixelColor.rgb())
    
            contrast_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(contrast_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = contrast_pixmap

    def apply_brightness_contrast(self, brightness, contrast):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            image = pixmap.toImage()
            width = image.width()
            height = image.height()

     
            adjusted_image = np.zeros((height, width, 4), dtype=np.uint8)

            for y in range(height):
                for x in range(width):
                    
                    r, g, b, a = QtGui.QColor(image.pixel(x, y)).getRgb()

                 
                    adjusted_r = min(max(r + brightness, 0), 255)
                    adjusted_g = min(max(g + brightness, 0), 255)
    
                    adjusted_r = min(max(((adjusted_r - 127) * contrast) + 127, 0), 255)
                    adjusted_g = min(max(((adjusted_g - 127) * contrast) + 127, 0), 255)
                    adjusted_b = min(max(((adjusted_b - 127) * contrast) + 127, 0), 255)

                    adjusted_image[y][x] = [adjusted_r, adjusted_g, adjusted_b, a]

            adjusted_qimage = QtGui.QImage(adjusted_image.data, width, height, width * 4, QtGui.QImage.Format_RGBA8888)

            adjusted_pixmap = QtGui.QPixmap.fromImage(adjusted_qimage)
            self.LbOutput.setPixmap(adjusted_pixmap)
            self.LbOutput.setAlignment(QtCore.Qt.AlignCenter)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = adjusted_pixmap

    def open_brightness_contrast_dialog(self):
  
        brightness, ok1 = QtWidgets.QInputDialog.getInt(None, "Brightness", "Masukan brightness (-255 to 255):", 0, -255, 255)
        contrast, ok2 = QtWidgets.QInputDialog.getDouble(None, "Contrast", "Masukan contrast (0.01 to 4.0):", 1.0, 0.01, 4.0)

        if ok1 and ok2:
            # Apply brightness and contrast adjustments
            self.apply_brightness_contrast(brightness, contrast)
           
    
    
    def flipHorizontal(self):
        pixmap = self.LbInput.pixmap()
        
        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)

                    

    
    #Fungsi untuk mengakhiri program
    def exitProgram(self):
        WijangNabil.close()
    
    #fungsi untuk menyimpan file
    def saveImage(self):
        pixmap = self.LbOutput.pixmap()
        if pixmap:
            saveFile = QtWidgets.QFileDialog()
            saveFile.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
            saveFile.setNameFilter("JPG File(*.jpg);; PNG FIles(*.png)")

            if saveFile.exec_() == QtWidgets.QDialog.Accepted:
                save_path = saveFile.selectedFiles()[0]
                self.displayed_pixmap.save(save_path)

    def changeHistogramEqu(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            input_image = pixmap.toImage()
            width = input_image.width()
            height = input_image.height()

            equalized_image = QtGui.QImage(width, height, QtGui.QImage.Format_RGB32)

            histogram = [0] * 256
            total_pixels = width * height
            

            for x in range(width):
                for y in range(height):
                    pixel_color = QtGui.QColor(*input_image.pixelColor(x, y).getRgb())
                    intensity = pixel_color.red()  # Kami asumsikan gambar grayscale

                    histogram[intensity] += 1

            # Menghitung distribusi kumulatif
            cumulative_distribution = [0] * 256
            cumulative_distribution[0] = histogram[0] / total_pixels

            for i in range(1, 256):
                cumulative_distribution[i] = cumulative_distribution[i - 1] + histogram[i] / total_pixels

            # Menyesuaikan nilai pixel pada gambar hasil
            for x in range(width):
                for y in range(height):
                    pixel_color = QtGui.QColor(*input_image.pixelColor(x, y).getRgb())
              

                    intensityR = pixel_color.red()  
                    intensityG = pixel_color.green()  
                    intensityB = pixel_color.blue()  

                    new_intensityR = int(255 * cumulative_distribution[intensityR])
                    new_intensityG = int(255 * cumulative_distribution[intensityG])
                    new_intensityB = int(255 * cumulative_distribution[intensityB])
                    new_color = QtGui.QColor(new_intensityR, new_intensityG, new_intensityB)
                    equalized_image.setPixelColor(x, y, new_color)
            

            output_pixmap = QtGui.QPixmap.fromImage(equalized_image)
            self.LbOutput.setPixmap(output_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = output_pixmap
    
    def changeFuzzyGray(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()

            lebar = img.width()
            tinggi = img.height()
        
            fuzzyH = np.zeros(256, dtype=float)
            m = 2
            n = 2

            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QColor(img.pixel(x, y))
                    intensity = pixel_color.red()  # Ambil komponen merah karena ini adalah gambar grayscale

                    for i in range(256):
                        fuzzyH[i] += 1.0 / (1.0 + abs(intensity - i) ** (2.0 / (m - 1)))  # Anda perlu mendefinisikan 'm' sebelumnya

            fuzzyH /= (lebar * tinggi)

            equalized_image = QImage(lebar, tinggi, QImage.Format_RGB32)
            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QColor(img.pixel(x, y))
                    intensity = pixel_color.red()

                    new_intensity = 0.0

                    for i in range(256):
                        new_intensity += fuzzyH[i] * (intensity ** (1.0 / (n - 1))) * (i ** (1.0 / (m - 1)))

                    new_intensity = int(new_intensity)

                    new_color = QColor(new_intensity, new_intensity, new_intensity)
                    equalized_image.setPixel(x, y, new_color.rgb())

            equalized_pixmap = QPixmap.fromImage(equalized_image)
            self.LbOutput.setPixmap(equalized_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = equalized_pixmap

    def changeFuzzyRGB(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()

            lebar = img.width()
            tinggi = img.height()
            m = 2
            n = 2

            fuzzyH_r = np.zeros(256, dtype=float)
            fuzzyH_g = np.zeros(256, dtype=float)
            fuzzyH_b = np.zeros(256, dtype=float)

            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QColor(img.pixelColor(x, y))
                    r, g, b, _ = pixel_color.getRgb()

                    for i in range(256):
                        fuzzyH_r[i] += 1.0 / (1.0 + abs(r - i) ** (2.0 / (m - 1)))
                        fuzzyH_g[i] += 1.0 / (1.0 + abs(g - i) ** (2.0 / (m - 1)))
                        fuzzyH_b[i] += 1.0 / (1.0 + abs(b - i) ** (2.0 / (m - 1)))

            fuzzyH_r /= (lebar * tinggi)
            fuzzyH_g /= (lebar * tinggi)
            fuzzyH_b /= (lebar * tinggi)

            equalized_image = QImage(lebar, tinggi, QImage.Format_RGB32)
            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QColor(img.pixelColor(x, y))
                    r, g, b, _ = pixel_color.getRgb()

                    new_r = 0.0
                    new_g = 0.0
                    new_b = 0.0

                    for i in range(256):
                        new_r += fuzzyH_r[i] * (r ** (1.0 / (n - 1))) * (i ** (1.0 / (m - 1)))
                        new_g += fuzzyH_g[i] * (g ** (1.0 / (n - 1))) * (i ** (1.0 / (m - 1)))
                        new_b += fuzzyH_b[i] * (b ** (1.0 / (n - 1))) * (i ** (1.0 / (m - 1)))

                    new_r = int(new_r)
                    new_g = int(new_g)
                    new_b = int(new_b)

                    new_color = QColor(new_r, new_g, new_b)
                    equalized_image.setPixel(x, y, new_color.rgb())

            equalized_pixmap = QPixmap.fromImage(equalized_image)
            

           
            self.LbOutput.setPixmap(equalized_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = equalized_pixmap
    
    def cropImg(self, x,y,lebar,tinggi):
        pixmap = self.LbInput.pixmap()

        if pixmap:
           img = pixmap.toImage()
           

           crop_img = img.copy(x, y, lebar, tinggi)

           img_pixmap = QPixmap.fromImage(crop_img)

           self.LbOutput.setPixmap(img_pixmap)
           self.LbOutput.setScaledContents(True)
           self.displayed_pixmap = img_pixmap
    
    def openCrop(self):
        
        posisiX, ok = QtWidgets.QInputDialog.getInt(None, "Croping Image", "Masukan posisi x :", 0, 0, 500)
        posisiY, ok2 = QtWidgets.QInputDialog.getInt(None, "Croping Image", "Masukan posisi y :", 0, 0, 500)
        cropLebar, ok4 = QtWidgets.QInputDialog.getInt(None, "Croping Image", "Masukan nilai crop lebar gambar:", 0, 0, 1000)
        cropTinggi, ok3 = QtWidgets.QInputDialog.getInt(None, "Croping Image", "Masukan nilai crop tinggi gambar :", 0, 0, 1000)

        if ok and ok2 and ok3 and ok4:
            self.cropImg(posisiX,posisiY,cropLebar,cropTinggi)
    
    def flipHorizontal(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            image = pixmap.toImage()
            width = image.width()
            height = image.height()

            # Create a numpy array to store the flipped image
            flipped_image = QImage(width, height, QImage.Format_RGBA8888)

            for y in range(height):
                for x in range(width):
                    pixel_color = QtGui.QColor(image.pixel(x, y))
                    flipped_image.setPixelColor(width - 1 - x, y, pixel_color)   

            flipped_pixmap = QPixmap.fromImage(flipped_image)
            self.LbOutput.setPixmap(flipped_pixmap)
            self.LbOutput.setAlignment(Qt.AlignCenter)
            self.displayed_pixmap=flipped_pixmap
            self.LbOutput.setScaledContents(True)
    
    def flipVertical(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            image = pixmap.toImage()
            width = image.width()
            height = image.height()

            # Create a numpy array to store the flipped image
            flipped_image = QImage(width, height, QImage.Format_RGBA8888)

            for y in range(height):
                for x in range(width):
                    pixel_color = QtGui.QColor(image.pixel(x, y))
                    flipped_image.setPixelColor(x, height - 1 - y, pixel_color) 

            flipped_pixmap = QPixmap.fromImage(flipped_image)
            self.LbOutput.setPixmap(flipped_pixmap)
            self.LbOutput.setAlignment(Qt.AlignCenter)
            self.displayed_pixmap=flipped_pixmap
            self.LbOutput.setScaledContents(True)
    
    def rotate_image(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            
            rotation_angle, ok = QtWidgets.QInputDialog.getInt(None, "Rotate Image", "Masukan derajat rotasi (degrees):", 0, -360, 360)
            if ok:
                pixmap = self.LbInput.pixmap()
                if pixmap:
                   
                    rotated_pixmap = pixmap.transformed(QtGui.QTransform().rotate(rotation_angle))
                    
                    self.LbOutput.setPixmap(rotated_pixmap)
                    self.displayed_pixmap = rotated_pixmap
                    self.LbOutput.setScaledContents(True)
    
    def changeBitDepth(self, num_bits):
        pixmap_input = self.LbInput.pixmap()

        if pixmap_input:
            # Mendapatkan QImage dari QPixmap
            image_input = pixmap_input.toImage()

            # Mendapatkan lebar dan tinggi gambar
            width = image_input.width()
            height = image_input.height()

            # Membuat QImage baru dengan bit kedalaman yang diinginkan
            image_output = QImage(width, height, QImage.Format_Mono if num_bits == 1 else QImage.Format_Indexed8)

            if num_bits == 1:
                # Mengisi gambar output dengan data dari gambar input (1 bit)
                threshold = 127  # Anda dapat mengatur ambang sesuai kebutuhan
                for x in range(width):
                    for y in range(height):
                        pixel_color = image_input.pixelColor(x, y)
                        intensity = pixel_color.red()
                        binary_intensity = 0 if intensity < threshold else 255
                        image_output.setPixel(x, y, binary_intensity)
            else:
                # Mengonversi gambar ke Indexed8 (2-8 bit)
                color_table = [QColor(i, i, i).rgb() for i in range(256)]
                image_output.setColorTable(color_table)
                for x in range(width):
                    for y in range(height):
                        pixel_color = image_input.pixelColor(x, y)
                        intensity = pixel_color.red()
                        quantized_intensity = int(intensity / (256 // (2 ** num_bits))) * (256 // (2 ** num_bits))
                        image_output.setPixel(x, y, quantized_intensity)

            # Menampilkan gambar hasil konversi di label output
            pixmap_output = QPixmap.fromImage(image_output)
            self.LbOutput.setPixmap(pixmap_output)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = pixmap_output

    
    def changeBitDepth1(self):
        pixmap_input = self.LbInput.pixmap()

        if pixmap_input:
            # Mendapatkan QImage dari QPixmap
            image_input = pixmap_input.toImage()

            # Mendapatkan lebar dan tinggi gambar
            width = image_input.width()
            height = image_input.height()

            # Membuat QImage baru dengan 1 bit
            image_output = QImage(width, height, QImage.Format_Mono)

            # Mengisi gambar output dengan data dari gambar input
            for x in range(width):
                for y in range(height):
                    pixel_color = image_input.pixelColor(x, y)
                    intensity = pixel_color.red()

                    # Mengonversi intensitas piksel menjadi biner (1 bit)
                    threshold = 127  # Anda dapat mengatur ambang sesuai kebutuhan
                    binary_intensity = 0 if intensity < threshold else 1

                    # Set piksel di gambar output
                    image_output.setPixel(x, y, binary_intensity)

            # Menampilkan gambar hasil konversi di label output
            pixmap_output = QPixmap.fromImage(image_output)
            self.LbOutput.setPixmap(pixmap_output)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = pixmap_output
    
    








if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WijangNabil = QtWidgets.QMainWindow()
    ui = Ui_WijangNabil()
    ui.setupUi(WijangNabil)
    WijangNabil.show()
    sys.exit(app.exec_())
