# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'latihan1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import typing
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QWidget, QPushButton,QFileDialog, QDialog
from PyQt5.QtGui import QPixmap, QColor, QImage, qRgb
from PyQt5.QtCore import Qt
import cv2
from matplotlib.image import imread
import matplotlib.image as mpimg 
from matplotlib import pyplot as plt
import numpy as np
from PIL import Image, ImageQt
from random import randint
from window_penjumlahan import Ui_ao_penjumlahan
from window_pengurangan import Ui_ao_pengurangan
from window_perkalian import Ui_Ui_ao_perkalian
from window_pembagian import Ui_ao_pembagian
from window_AND import Ui_ao_AND
from window_OR import Ui_ao_OR
from window_NOT import Ui_ao_NOT

# from latihan.window_penjumlahan1 import Ui_ao_penjumlahan

# class Ui_aritmatic(QWidget):
#     def __init__(self):
#         super().__init__()
#         layout = QVBoxLayout()
#         self.label = QLabel("Aritmatik Operation % d" % randint(1, 100) )
#         layout.addWidget(self.label)
#         self.setLayout(layout)

class Ui_WijangNabil(object):
    def openWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_ao_penjumlahan()
        self.ui.setupUi(self.window)
        self.window.show()
    
    def openWindowPengurangan(self):
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_pengurangan()
        self.ui.setupUi(self.window2)
        self.window2.show()

    def openWindowPerkalian(self):
        self.window3 = QtWidgets.QMainWindow()
        self.ui = Ui_Ui_ao_perkalian()
        self.ui.setupUi(self.window3)
        self.window3.show()

    def openWindowPembagian(self):
        self.window4 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_pembagian()
        self.ui.setupUi(self.window4)
        self.window4.show()
    
    def openWindowAND(self):
        self.window5 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_AND()
        self.ui.setupUi(self.window5)
        self.window5.show()

    def openWindowOR(self):
        self.window6 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_OR()
        self.ui.setupUi(self.window6)
        self.window6.show()

    def openWindowNOT(self):
        self.window7 = QtWidgets.QMainWindow()
        self.ui = Ui_ao_NOT()
        self.ui.setupUi(self.window7)
        self.window7.show()
        
    def setupUi(self, WijangNabil):
        WijangNabil.setObjectName("WijangNabil")
        WijangNabil.resize(897, 890)
        self.centralwidget = QtWidgets.QWidget(WijangNabil)
        self.centralwidget.setObjectName("centralwidget")
        self.LbInput = QtWidgets.QLabel(self.centralwidget)
        self.LbInput.setGeometry(QtCore.QRect(30, 50, 841, 361))
        self.LbInput.setFrameShape(QtWidgets.QFrame.Box)
        self.LbInput.setText("")
        self.LbInput.setObjectName("LbInput")
        self.LbOutput = QtWidgets.QLabel(self.centralwidget)
        self.LbOutput.setGeometry(QtCore.QRect(30, 500, 841, 331))
        self.LbOutput.setFrameShape(QtWidgets.QFrame.Box)
        self.LbOutput.setText("")
        self.LbOutput.setObjectName("LbOutput")
        self.t_input = QtWidgets.QLabel(self.centralwidget)
        self.t_input.setGeometry(QtCore.QRect(30, 10, 181, 31))
        self.t_input.setObjectName("t_input")
        self.t_input_2 = QtWidgets.QLabel(self.centralwidget)
        self.t_input_2.setGeometry(QtCore.QRect(30, 460, 181, 31))
        self.t_input_2.setObjectName("t_input_2")
        self.path_img = QtWidgets.QLabel(self.centralwidget)
        self.path_img.setGeometry(QtCore.QRect(100, 420, 541, 41))
        self.path_img.setFrameShape(QtWidgets.QFrame.Box)
        self.path_img.setText("")
        self.path_img.setObjectName("path_img")
       
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 425, 61, 31))
        self.label.setObjectName("label")
        WijangNabil.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(WijangNabil)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 897, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuImage_Processing = QtWidgets.QMenu(self.menubar)
        self.menuImage_Processing.setObjectName("menuImage_Processing")

        self.menuRGB_to_Greyscale = QtWidgets.QMenu(self.menuImage_Processing)
        self.menuRGB_to_Greyscale.setObjectName("menuRGB_to_Greyscale")

        self.menuFlip = QtWidgets.QMenu(self.menuImage_Processing)
        self.menuFlip.setObjectName("menuFlip")

        self.menuBit = QtWidgets.QMenu(self.menuImage_Processing)
        self.menuBit.setObjectName("menuBit")

        self.menuArimathics_Operation = QtWidgets.QMenu(self.menubar)
        self.menuArimathics_Operation.setObjectName("menuArimathics_Operation")
        self.menuViews = QtWidgets.QMenu(self.menubar)
        self.menuViews.setObjectName("menuViews")
        
        self.menuFilter = QtWidgets.QMenu(self.menubar)
        self.menuFilter.setObjectName("menuFilter")
        self.menuEdge_Detection = QtWidgets.QMenu(self.menubar)
        self.menuEdge_Detection.setObjectName("menuEdge_Detection")
        self.menuMorfologi = QtWidgets.QMenu(self.menubar)
        self.menuMorfologi.setObjectName("menuMorfologi")
        WijangNabil.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(WijangNabil)
        self.statusbar.setObjectName("statusbar")
        WijangNabil.setStatusBar(self.statusbar)
        self.btn_open = QtWidgets.QAction(WijangNabil)
        self.btn_open.setObjectName("btn_open")
        self.btn_open.triggered.connect(self.open_folder2)
        self.btn_save = QtWidgets.QAction(WijangNabil)
        self.btn_save.setObjectName("btn_save")
        self.btn_save.triggered.connect(self.saveImage)
        self.actionExit = QtWidgets.QAction(WijangNabil)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(self.exitProgram)
        self.actionAverage = QtWidgets.QAction(WijangNabil)
        self.actionAverage.setObjectName("actionAverage")
        self.actionAverage.triggered.connect(self.changeAverage)
        self.actionLightness = QtWidgets.QAction(WijangNabil)
        self.actionLightness.setObjectName("actionLightness")
        self.actionLightness.triggered.connect(self.changeLightness)
        self.actionLuminosity = QtWidgets.QAction(WijangNabil)
        self.actionLuminosity.setObjectName("actionLuminosity")
        self.actionLuminosity.triggered.connect(self.changeLuminance)
        self.actionInverse = QtWidgets.QAction(WijangNabil)
        self.actionInverse.setObjectName("actionInverse")
        self.actionInverse.triggered.connect(self.changeInvert)
        self.btn_exit = QtWidgets.QAction(WijangNabil)
        self.btn_exit.setObjectName("btn_exit")
        self.btn_exit.triggered.connect(self.exitProgram)
        self.actionAbout = QtWidgets.QAction(WijangNabil)
        self.actionAbout.setObjectName("actionAbout")
        self.Btn_brightness = QtWidgets.QAction(WijangNabil)
        self.Btn_brightness.setObjectName("Btn_brightness")
        self.Btn_brightness.triggered.connect(self.changeBrightness)
        self.Btn_contrast = QtWidgets.QAction(WijangNabil)
        self.Btn_contrast.setObjectName("Btn_contrast")
        self.Btn_contrast.triggered.connect(self.changeContrast)
        self.actionCropping = QtWidgets.QAction(WijangNabil)
        self.actionCropping.setObjectName("actionCropping")
        self.actionCropping.triggered.connect(self.cropImg)

        self.actionHistogramEqu = QtWidgets.QAction(WijangNabil)
        self.actionHistogramEqu.setObjectName("actionHistogramEqu")
        self.actionHistogramEqu.triggered.connect(self.changeHistogramEqu)

        self.actionFuzzyRGB = QtWidgets.QAction(WijangNabil)
        self.actionFuzzyRGB.setObjectName("actionFuzzyRGB")

        self.actionFuzzyGrey = QtWidgets.QAction(WijangNabil)
        self.actionFuzzyGrey.setObjectName("actionFuzzyGrey")
        self.actionFuzzyGrey.triggered.connect(self.changeFuzzyGray)

        self.actionHorizontal = QtWidgets.QAction(WijangNabil)
        self.actionHorizontal.setObjectName("actionHorizontal")
        self.actionHorizontal.triggered.connect(self.flipHorizontal)

        self.actionVertical = QtWidgets.QAction(WijangNabil)
        self.actionVertical.setObjectName("actionVertical")
        self.actionVertical.triggered.connect(self.flipVertical)

        self.actionBit1 = QtWidgets.QAction(WijangNabil)
        self.actionBit1.setObjectName("actionBit1")
        self.actionBit1.triggered.connect(self.changeBitDepth)

        self.actionPenjumlahan = QtWidgets.QAction(WijangNabil)
        self.actionPenjumlahan.setObjectName("actionPenjumlahan")
        self.actionPenjumlahan.triggered.connect(self.openWindow)
        self.actionPenguranga2n = QtWidgets.QAction(WijangNabil)
        self.actionPenguranga2n.setObjectName("actionPenguranga2n")
        self.actionPenguranga2n.triggered.connect(self.openWindowPengurangan)
        self.actionPerkalian = QtWidgets.QAction(WijangNabil)
        self.actionPerkalian.setObjectName("actionPerkalian")
        self.actionPerkalian.triggered.connect(self.openWindowPerkalian)
        self.actionPembagian = QtWidgets.QAction(WijangNabil)
        self.actionPembagian.setObjectName("actionPembagian")
        self.actionPembagian.triggered.connect(self.openWindowPembagian)

        self.actionAND = QtWidgets.QAction(WijangNabil)
        self.actionAND.setObjectName("actionAND")
        self.actionAND.triggered.connect(self.openWindowAND)

        self.actionOR = QtWidgets.QAction(WijangNabil)
        self.actionOR.setObjectName("actionOR")
        self.actionOR.triggered.connect(self.openWindowOR)

        self.actionNOT = QtWidgets.QAction(WijangNabil)
        self.actionNOT.setObjectName("actionNOT")
        self.actionNOT.triggered.connect(self.openWindowNOT)

        self.btn_viewHistogram = QtWidgets.QAction(WijangNabil)
        self.btn_viewHistogram.setObjectName("Btn_viewHistogram")
        self.btn_viewHistogram.triggered.connect(self.show_image_histogram)

        self.btn_viewHistogramOuput = QtWidgets.QAction(WijangNabil)
        self.btn_viewHistogramOuput.setObjectName("Btn_viewHistogramOuput")
        self.btn_viewHistogramOuput.triggered.connect(self.show_image_histogram_Output)

        self.menuFile.addAction(self.btn_open)
        self.menuFile.addAction(self.btn_save)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.btn_exit)
        self.menuFile.addAction(self.actionAbout)
        self.menuRGB_to_Greyscale.addAction(self.actionAverage)
        self.menuRGB_to_Greyscale.addAction(self.actionLightness)
        self.menuRGB_to_Greyscale.addAction(self.actionLuminosity)
        self.menuFlip.addAction(self.actionHorizontal)
        self.menuFlip.addAction(self.actionVertical)
        self.menuImage_Processing.addAction(self.menuRGB_to_Greyscale.menuAction())
        self.menuImage_Processing.addAction(self.actionInverse)
        self.menuImage_Processing.addAction(self.Btn_brightness)
        self.menuImage_Processing.addAction(self.Btn_contrast)
        self.menuImage_Processing.addSeparator()
        self.menuImage_Processing.addAction(self.actionCropping)
        self.menuImage_Processing.addAction(self.menuFlip.menuAction())
        self.menuImage_Processing.addSeparator()
        self.menuImage_Processing.addAction(self.actionHistogramEqu)
        self.menuImage_Processing.addAction(self.actionFuzzyRGB)
        self.menuImage_Processing.addAction(self.actionFuzzyGrey)
        self.menuImage_Processing.addSeparator()
        self.menuImage_Processing.addAction(self.menuBit.menuAction())
        self.menuBit.addAction(self.actionBit1)


        self.menuArimathics_Operation.addAction(self.actionPenjumlahan)
        self.menuArimathics_Operation.addAction(self.actionPenguranga2n)
        self.menuArimathics_Operation.addAction(self.actionPerkalian)
        self.menuArimathics_Operation.addAction(self.actionPembagian)
        self.menuArimathics_Operation.addAction(self.actionAND)
        self.menuArimathics_Operation.addAction(self.actionOR)
        self.menuArimathics_Operation.addAction(self.actionNOT)


        self.menuViews.addAction(self.btn_viewHistogram)
        self.menuViews.addAction(self.btn_viewHistogramOuput)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuImage_Processing.menuAction())
        self.menubar.addAction(self.menuArimathics_Operation.menuAction())
        self.menubar.addAction(self.menuViews.menuAction())
        self.menubar.addAction(self.menuBit.menuAction())
       
        self.menubar.addAction(self.menuFilter.menuAction())
        self.menubar.addAction(self.menuEdge_Detection.menuAction())
        self.menubar.addAction(self.menuMorfologi.menuAction())
      
        # self.window1 = Ui_aritmatic()
        # self.windowArimatik = wind

        self.retranslateUi(WijangNabil)
        QtCore.QMetaObject.connectSlotsByName(WijangNabil)

    def retranslateUi(self, WijangNabil):
        _translate = QtCore.QCoreApplication.translate
        WijangNabil.setWindowTitle(_translate("WijangNabil", "MainWindow"))
        self.t_input.setText(_translate("WijangNabil", "Input Image :"))
        self.t_input_2.setText(_translate("WijangNabil", "Output Image :"))
        self.label.setText(_translate("WijangNabil", "Path :"))
        self.menuFile.setTitle(_translate("WijangNabil", "File"))
        self.menuImage_Processing.setTitle(_translate("WijangNabil", "Image Processing"))
        self.menuRGB_to_Greyscale.setTitle(_translate("WijangNabil", "RGB to Greyscale"))
        self.menuFlip.setTitle(_translate("WijangNabil", "Flip"))
        self.menuBit.setTitle(_translate("WijangNabil", "Bit"))
        self.menuArimathics_Operation.setTitle(_translate("WijangNabil", "Arimathics Operation"))
        self.menuViews.setTitle(_translate("WijangNabil", "Views"))
        self.menuFilter.setTitle(_translate("WijangNabil", "Filter"))
        self.menuEdge_Detection.setTitle(_translate("WijangNabil", "Edge Detection"))
        self.menuMorfologi.setTitle(_translate("WijangNabil", "Morfologi"))
        self.btn_open.setText(_translate("WijangNabil", "Open"))
        self.btn_save.setText(_translate("WijangNabil", "Save as"))
        self.actionExit.setText(_translate("WijangNabil", "Exit"))
        self.actionAverage.setText(_translate("WijangNabil", "Average"))
        self.actionLightness.setText(_translate("WijangNabil", "Lightness"))
        self.actionLuminosity.setText(_translate("WijangNabil", "Luminosity"))
        self.actionInverse.setText(_translate("WijangNabil", "Inverse"))
        
        self.actionHistogramEqu.setText(_translate("WijangNabil", "Histogram Equalization"))
        self.actionFuzzyRGB.setText(_translate("WijangNabil", "Fuzzy HE RGB"))
        self.actionFuzzyGrey.setText(_translate("WijangNabil", "Fuzzy Greyscale"))
        
        self.actionBit1.setText(_translate("WijangNabil", "Bit 1"))



        self.btn_exit.setText(_translate("WijangNabil", "Exit"))
        self.actionAbout.setText(_translate("WijangNabil", "About "))
        self.Btn_brightness.setText(_translate("WijangNabil", "Brightness"))
        self.Btn_contrast.setText(_translate("WijangNabil", "Contrast"))
        self.actionCropping.setText(_translate("WijangNabil", "Crop"))
        self.actionHorizontal.setText(_translate("WijangNabil", "Horizontal"))
        self.actionVertical.setText(_translate("WijangNabil", "Vertical"))
        self.actionPenjumlahan.setText(_translate("WijangNabil", "Penjumlahan"))
        self.actionPenguranga2n.setText(_translate("WijangNabil", "Pengurangan"))
        self.actionPerkalian.setText(_translate("WijangNabil", "Perkalian"))
        self.actionPembagian.setText(_translate("WijangNabil", "Pembagian"))

        self.actionAND.setText(_translate("WijangNabil", "AND"))
        self.actionOR.setText(_translate("WijangNabil", "OR"))
        self.actionNOT.setText(_translate("WijangNabil", "NOT"))
        self.btn_viewHistogram.setText(_translate("WijangNabil", "View Histogram Input"))
        self.btn_viewHistogramOuput.setText(_translate("WijangNabil", "View Histogram Output"))
    
    def open_folder2(self):
        options = QFileDialog.Options()
        options = QFileDialog.ReadOnly
        self.LbOutput.clear()

        file_name, _ = QFileDialog.getOpenFileName(None,"Open Image File","",
                                                "Images(*.png *.jpg *jpeg);;All Files(*)", options=options)
        if file_name:
            image = QtGui.QImage(file_name)
            if not image.isNull():
                pixmap = QtGui.QPixmap.fromImage(image)
                self.LbInput.setPixmap(pixmap)
                self.path_img.setText(file_name)
                self.LbInput.setScaledContents(True)
    
    def show_image_histogram_Output(self):
        file_name = self.LbOutput.pixmap()
        
        if file_name:
            image = QtGui.QImage(file_name)
            if not image.isNull():
               
                image_np = self.qimage_to_ndarray(image)
                plt.figure()
                plt.hist(image_np.ravel(), bins=256, range=(0, 256), density=True, color='black', alpha=0.7)
                plt.xlabel('Pixel Value')
                plt.ylabel('Normalized Frequency')
                plt.title('Histogram Gambar')
                plt.show()
    
    def show_image_histogram(self):
        file_name = self.LbInput.pixmap()
        
        if file_name:
            image = QtGui.QImage(file_name)
            if not image.isNull():
               
                image_np = self.qimage_to_ndarray(image)
                plt.figure()
                plt.hist(image_np.ravel(), bins=256, range=(0, 256), density=True, color='black', alpha=0.7)
                plt.xlabel('Pixel Value')
                plt.ylabel('Normalized Frequency')
                plt.title('Histogram Gambar')
                plt.show()

    def qimage_to_ndarray(self, qimage):
        """
        Konversi QImage ke larik NumPy.
        """
        width = qimage.width()
        height = qimage.height()

        ptr = qimage.bits()
        ptr.setsize(height * width * 4)
        arr = np.frombuffer(ptr, np.uint8).reshape((height, width, 4))

        # Mengabaikan channel alpha (RGBA), jika ada
        if arr.shape[2] == 4:
            arr = arr[:, :, :3]

        print(arr)    

        return arr
    
    
    def changeLuminance(self):
        pixmap = self.LbInput.pixmap()

        if pixmap :
            img = pixmap.toImage()
            
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel),QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    gamma = 1.04
                    luminance = int(0.299 * r  + 0.587 * g  + 0.114 * b )
                    img.setPixel(x,y, qRgb(luminance, luminance, luminance))

            luminance_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(luminance_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = luminance_pixmap

    def changeAverage(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel),QtGui.qGreen(pixel),  QtGui.qBlue(pixel)
                    konstanta = 3
                    average = (r+g+b) // konstanta
                    img.setPixel(x, y, qRgb(average,average,average))
            
            average_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(average_pixmap)
            self.LbOutput.setScaledContents(True)                                                
            self.displayed_pixmap = average_pixmap
    
    def changeLightness(self):
        pixmap = self.LbInput.pixmap()
        if pixmap :
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x, y)
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    konstanta = 2
                    lightness = (max(r,g,b) + min(r,g,b)) // konstanta
                    img.setPixel(x,y,qRgb(lightness,lightness,lightness))
            
            lightness_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(lightness_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = lightness_pixmap

    def changeInvert(self):
        pixmap = self.LbInput.pixmap()
        if pixmap: 
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    invert = qRgb(255 - r, 255-g, 255-b)
                    img.setPixel(x,y,invert)
            
            invert_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(invert_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = invert_pixmap

    def changeBrightness(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    kons_bright = 100
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    new_r = min(255, int(r * kons_bright))
                    new_g = min(255, int(g * kons_bright))
                    new_b = min(255, int(b * kons_bright))
                    brightness = QColor(new_r , new_g , new_b ).rgba()
                    img.setPixel(x,y,brightness)

        brightness_pixmap = QPixmap.fromImage(img)
        self.LbOutput.setPixmap(brightness_pixmap)
        self.LbOutput.setScaledContents(True)
        self.displayed_pixmap = brightness_pixmap

    def changeContrast(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixelColor = QColor(img.pixel(x,y))

                    rata_rata = (pixelColor.red() + pixelColor.green() + pixelColor.blue()) //3

                    delta_r = pixelColor.red() - rata_rata
                    delta_g = pixelColor.green() - rata_rata
                    delta_b = pixelColor.blue() - rata_rata 

                    konst_constrast = 5

                    new_r = int(rata_rata + konst_constrast * delta_r)
                    new_g = int(rata_rata + konst_constrast * delta_g)
                    new_b = int(rata_rata + konst_constrast * delta_b)
                    
                    new_r = max(0, min(255, new_r))
                    new_g = max(0, min(255, new_g))
                    new_b = max(0, min(255, new_b))

                    pixelColor.setRed(new_r)
                    pixelColor.setGreen(new_g)
                    pixelColor.setBlue(new_b)

                    img.setPixel(x,y,pixelColor.rgb())
    
            contrast_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(contrast_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = contrast_pixmap
           
    
    
    def flipHorizontal(self):
        pixmap = self.LbInput.pixmap()
        
        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)

                    

    
    #Fungsi untuk mengakhiri program
    def exitProgram(self):
        WijangNabil.close()
    
    #fungsi untuk menyimpan file
    def saveImage(self):
        pixmap = self.LbOutput.pixmap()
        if pixmap:
            saveFile = QtWidgets.QFileDialog()
            saveFile.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
            saveFile.setNameFilter("JPG File(*.jpg);; PNG FIles(*.png)")

            if saveFile.exec_() == QtWidgets.QDialog.Accepted:
                save_path = saveFile.selectedFiles()[0]
                self.displayed_pixmap.save(save_path)
    

    
    def viewHistogram(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = mpimg.imread(pixmap)
            plt.hist(img.ravel(), 255,[0,256])
            plt.show()

    def viewHistogramOutput(self):
        pixmap = self.LbOutput.pixmap()
        if pixmap:
            img = mpimg.imread(pixmap)
            plt.hist(img.ravel(), 255, [0,256])
            plt.show()

    def changeHistogramEqu(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            input_image = pixmap.toImage()
            width = input_image.width()
            height = input_image.height()

            equalized_image = QtGui.QImage(width, height, QtGui.QImage.Format_RGB32)

            histogram = [0] * 256
            total_pixels = width * height
            

            for x in range(width):
                for y in range(height):
                    pixel_color = QtGui.QColor(*input_image.pixelColor(x, y).getRgb())
                    intensity = pixel_color.red()  # Kami asumsikan gambar grayscale

                    histogram[intensity] += 1

            # Menghitung distribusi kumulatif
            cumulative_distribution = [0] * 256
            cumulative_distribution[0] = histogram[0] / total_pixels

            for i in range(1, 256):
                cumulative_distribution[i] = cumulative_distribution[i - 1] + histogram[i] / total_pixels

            # Menyesuaikan nilai pixel pada gambar hasil
            for x in range(width):
                for y in range(height):
                    pixel_color = QtGui.QColor(*input_image.pixelColor(x, y).getRgb())
              

                    intensityR = pixel_color.red()  
                    intensityG = pixel_color.green()  
                    intensityB = pixel_color.blue()  

                    new_intensityR = int(255 * cumulative_distribution[intensityR])
                    new_intensityG = int(255 * cumulative_distribution[intensityG])
                    new_intensityB = int(255 * cumulative_distribution[intensityB])
                    new_color = QtGui.QColor(new_intensityR, new_intensityG, new_intensityB)
                    equalized_image.setPixelColor(x, y, new_color)
            

            output_pixmap = QtGui.QPixmap.fromImage(equalized_image)
            self.LbOutput.setPixmap(output_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = output_pixmap
    
    def changeFuzzyGray(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()

            lebar = img.width()
            tinggi = img.height()
            m = 2
            n = 2

            fuzzyH = np.zeros(255, dtype=float)

            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QtGui.QColor(*img.pixelColor(x,y).getRgb())
                    intensity = pixel_color.red()

                    for i in range(1, 255):
                        fuzzyH[i] += 1.0 / (1.0 + abs(intensity - i ) ** (2.0 / (m-1)))

            fuzzyH /= (lebar * tinggi)

            equalize_img = QImage(lebar, tinggi, QImage.Format.Format_RGB32)

            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QtGui.QColor(*img.pixelColor(x,y).getRgb())
                    intensity = pixel_color.red()

                    new_intesity = 0.0
                    for i in range(1, 255):
                        new_intesity += fuzzyH[i] * (intensity ** (1.0 / (n-1))) * (i ** (1.0 / (m-1)))

                        new_intesity = int(new_intesity)

                        new_color = QColor(new_intesity, new_intesity, new_intesity)
                        equalize_img.setPixel(x, y, new_color.rgb())

            equalize_pixmap= QPixmap.fromImage(equalize_img)
            self.LbOutput.setPixmap(equalize_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = equalize_pixmap

    def changeFuzzyRGB(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()

            lebar = img.width()
            tinggi = img.height()
            m = 2
            n = 2

            fuzzyH = np.zeros(255, dtype=float)

            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QColor(img.pixel(x,y))
                    intensityR = pixel_color.red()
                    intensityG = pixel_color.green()
                    intensityB = pixel_color.blue()

                    for i in range(255):
                        fuzzyH[i] += 1.0 / (1.0 + abs(intensity - i ) ** (2.0 / (m-1)))

            fuzzyH /= (lebar * tinggi)

            equalize_img = QImage(lebar, tinggi, QImage.Format.Format_RGB32)

            for x in range(lebar):
                for y in range(tinggi):
                    pixel_color = QColor(img.pixel(x,y))
                    intensity = pixel_color.red()

                    new_intesity = 0.0
                    for i in range(255):
                        new_intesity += fuzzyH[i] * (intensity ** (1.0 / (n-1))) * (i ** (1.0 / (m-1)))

                        new_intesity = int(new_intesity)

                        new_color = QColor(new_intesity, new_intesity, new_intesity)
                        equalize_img.setPixel(x, y, new_color.rgb())

            equalize_pixmap= QPixmap.fromImage(equalize_img)
            self.LbOutput.setPixmap(equalize_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = equalize_pixmap
    
    def cropImg(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
           img = pixmap.toImage()
           x = 500
           y = 500
           tinggi = 400
           lebar = 600

           crop_img = img.copy(x, y, lebar, tinggi)

           img_pixmap = QPixmap.fromImage(crop_img)

           self.LbOutput.setPixmap(img_pixmap)
           self.LbOutput.setScaledContents(True)
           self.displayed_pixmap = img_pixmap
    
    def flipHorizontal(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            flip_hor = img.mirrored(True,False)


            img_pixmap = QPixmap.fromImage(flip_hor)
            self.LbOutput.setPixmap(img_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = img_pixmap
    
    def flipVertical(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            flip_hor = img.mirrored(False,True)


            img_pixmap = QPixmap.fromImage(flip_hor)
            self.LbOutput.setPixmap(img_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = img_pixmap

    
    def changeBitDepth(self):
        pixmap_input = self.LbInput.pixmap()

        if pixmap_input:
            # Mendapatkan QImage dari QPixmap
            image_input = pixmap_input.toImage()

            # Mendapatkan lebar dan tinggi gambar
            width = image_input.width()
            height = image_input.height()

            # Membuat QImage baru dengan 1 bit
            image_output = QImage(width, height, QImage.Format_Mono)

            # Mengisi gambar output dengan data dari gambar input
            for x in range(width):
                for y in range(height):
                    pixel_color = image_input.pixelColor(x, y)
                    intensity = pixel_color.red()

                    # Mengonversi intensitas piksel menjadi biner (1 bit)
                    threshold = 127  # Anda dapat mengatur ambang sesuai kebutuhan
                    binary_intensity = 0 if intensity < threshold else 1

                    # Set piksel di gambar output
                    image_output.setPixel(x, y, binary_intensity)

            # Menampilkan gambar hasil konversi di label output
            pixmap_output = QPixmap.fromImage(image_output)
            self.LbOutput.setPixmap(pixmap_output)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = pixmap_output




        
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WijangNabil = QtWidgets.QMainWindow()
    ui = Ui_WijangNabil()
    ui.setupUi(WijangNabil)
    WijangNabil.show()
    sys.exit(app.exec_())
