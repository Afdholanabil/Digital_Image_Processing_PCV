# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'latihan1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import typing
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QWidget, QPushButton,QFileDialog, QDialog
from PyQt5.QtGui import QPixmap, QColor, QImage, qRgb
from PyQt5.QtCore import Qt
import cv2
from matplotlib.image import imread 
import numpy as np
from PIL import Image, ImageQt
from random import randint

class Ui_aritmatic(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout()
        self.label = QLabel("Aritmatik Operation % d" % randint(1, 100) )
        layout.addWidget(self.label)
        self.setLayout(layout)


class Ui_WijangNabil(object):
    def setupUi(self, WijangNabil):
        WijangNabil.setObjectName("WijangNabil")
        WijangNabil.resize(897, 890)
        self.centralwidget = QtWidgets.QWidget(WijangNabil)
        self.centralwidget.setObjectName("centralwidget")
        self.LbInput = QtWidgets.QLabel(self.centralwidget)
        self.LbInput.setGeometry(QtCore.QRect(30, 50, 841, 361))
        self.LbInput.setFrameShape(QtWidgets.QFrame.Box)
        self.LbInput.setText("")
        self.LbInput.setObjectName("LbInput")
        self.LbOutput = QtWidgets.QLabel(self.centralwidget)
        self.LbOutput.setGeometry(QtCore.QRect(30, 500, 841, 331))
        self.LbOutput.setFrameShape(QtWidgets.QFrame.Box)
        self.LbOutput.setText("")
        self.LbOutput.setObjectName("LbOutput")
        self.t_input = QtWidgets.QLabel(self.centralwidget)
        self.t_input.setGeometry(QtCore.QRect(30, 10, 181, 31))
        self.t_input.setObjectName("t_input")
        self.t_input_2 = QtWidgets.QLabel(self.centralwidget)
        self.t_input_2.setGeometry(QtCore.QRect(30, 460, 181, 31))
        self.t_input_2.setObjectName("t_input_2")
        self.path_img = QtWidgets.QLabel(self.centralwidget)
        self.path_img.setGeometry(QtCore.QRect(100, 420, 541, 41))
        self.path_img.setFrameShape(QtWidgets.QFrame.Box)
        self.path_img.setText("")
        self.path_img.setObjectName("path_img")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(660, 440, 211, 21))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 425, 61, 31))
        self.label.setObjectName("label")
        WijangNabil.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(WijangNabil)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 897, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuImage_Processing = QtWidgets.QMenu(self.menubar)
        self.menuImage_Processing.setObjectName("menuImage_Processing")
        self.menuRGB_to_Greyscale = QtWidgets.QMenu(self.menuImage_Processing)
        self.menuRGB_to_Greyscale.setObjectName("menuRGB_to_Greyscale")
        self.menuFlip = QtWidgets.QMenu(self.menuImage_Processing)
        self.menuFlip.setObjectName("menuFlip")
        self.menuArimathics_Operation = QtWidgets.QMenu(self.menubar)
        self.menuArimathics_Operation.setObjectName("menuArimathics_Operation")
        self.menuViews = QtWidgets.QMenu(self.menubar)
        self.menuViews.setObjectName("menuViews")
        self.menuFilter = QtWidgets.QMenu(self.menubar)
        self.menuFilter.setObjectName("menuFilter")
        self.menuEdge_Detection = QtWidgets.QMenu(self.menubar)
        self.menuEdge_Detection.setObjectName("menuEdge_Detection")
        self.menuMorfologi = QtWidgets.QMenu(self.menubar)
        self.menuMorfologi.setObjectName("menuMorfologi")
        WijangNabil.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(WijangNabil)
        self.statusbar.setObjectName("statusbar")
        WijangNabil.setStatusBar(self.statusbar)
        self.btn_open = QtWidgets.QAction(WijangNabil)
        self.btn_open.setObjectName("btn_open")
        self.btn_open.triggered.connect(self.open_folder2)
        self.btn_save = QtWidgets.QAction(WijangNabil)
        self.btn_save.setObjectName("btn_save")
        self.btn_save.triggered.connect(self.saveImage)
        self.actionExit = QtWidgets.QAction(WijangNabil)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(self.exitProgram)
        self.actionAverage = QtWidgets.QAction(WijangNabil)
        self.actionAverage.setObjectName("actionAverage")
        self.actionAverage.triggered.connect(self.changeAverage)
        self.actionLightness = QtWidgets.QAction(WijangNabil)
        self.actionLightness.setObjectName("actionLightness")
        self.actionLightness.triggered.connect(self.changeLightness)
        self.actionLuminosity = QtWidgets.QAction(WijangNabil)
        self.actionLuminosity.setObjectName("actionLuminosity")
        self.actionLuminosity.triggered.connect(self.changeLuminance)
        self.actionInverse = QtWidgets.QAction(WijangNabil)
        self.actionInverse.setObjectName("actionInverse")
        self.actionInverse.triggered.connect(self.changeInvert)

        self.btn_exit = QtWidgets.QAction(WijangNabil)
        self.btn_exit.setObjectName("btn_exit")
        self.btn_exit.triggered.connect(self.exitProgram)
        self.actionAbout = QtWidgets.QAction(WijangNabil)
        self.actionAbout.setObjectName("actionAbout")
        self.Btn_brightness = QtWidgets.QAction(WijangNabil)
        self.Btn_brightness.setObjectName("Btn_brightness")
        self.Btn_brightness.triggered.connect(self.changeBrightness)
        self.Btn_contrast = QtWidgets.QAction(WijangNabil)
        self.Btn_contrast.setObjectName("Btn_contrast")
        self.Btn_contrast.triggered.connect(self.changeContrast)
        self.actionCropping = QtWidgets.QAction(WijangNabil)
        self.actionCropping.setObjectName("actionCropping")
        self.actionHorizontal = QtWidgets.QAction(WijangNabil)
        self.actionHorizontal.setObjectName("actionHorizontal")
        self.menuFile.addAction(self.btn_open)
        self.menuFile.addAction(self.btn_save)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.btn_exit)
        self.menuFile.addAction(self.actionAbout)
        self.menuRGB_to_Greyscale.addAction(self.actionAverage)
        self.menuRGB_to_Greyscale.addAction(self.actionLightness)
        self.menuRGB_to_Greyscale.addAction(self.actionLuminosity)
        self.menuFlip.addAction(self.actionHorizontal)
        self.menuImage_Processing.addAction(self.menuRGB_to_Greyscale.menuAction())
        self.menuImage_Processing.addAction(self.actionInverse)
        self.menuImage_Processing.addAction(self.Btn_brightness)
        self.menuImage_Processing.addAction(self.Btn_contrast)
        self.menuImage_Processing.addSeparator()
        self.menuImage_Processing.addAction(self.actionCropping)
        self.menuImage_Processing.addAction(self.menuFlip.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuImage_Processing.menuAction())
        self.menubar.addAction(self.menuArimathics_Operation.menuAction())
        self.menubar.addAction(self.menuViews.menuAction())
        self.menubar.addAction(self.menuFilter.menuAction())
        self.menubar.addAction(self.menuEdge_Detection.menuAction())
        self.menubar.addAction(self.menuMorfologi.menuAction())
        self.window1 = Ui_aritmatic()


        self.retranslateUi(WijangNabil)
        QtCore.QMetaObject.connectSlotsByName(WijangNabil)

    def retranslateUi(self, WijangNabil):
        _translate = QtCore.QCoreApplication.translate
        WijangNabil.setWindowTitle(_translate("WijangNabil", "MainWindow"))
        self.t_input.setText(_translate("WijangNabil", "Input Image :"))
        self.t_input_2.setText(_translate("WijangNabil", "Output Image :"))
        self.label.setText(_translate("WijangNabil", "Path :"))
        self.menuFile.setTitle(_translate("WijangNabil", "File"))
        self.menuImage_Processing.setTitle(_translate("WijangNabil", "Image Processing"))
        self.menuRGB_to_Greyscale.setTitle(_translate("WijangNabil", "RGB to Greyscale"))
        self.menuFlip.setTitle(_translate("WijangNabil", "Flip"))
        self.menuArimathics_Operation.setTitle(_translate("WijangNabil", "Arimathics Operation"))
        self.menuViews.setTitle(_translate("WijangNabil", "Views"))
        self.menuFilter.setTitle(_translate("WijangNabil", "Filter"))
        self.menuEdge_Detection.setTitle(_translate("WijangNabil", "Edge Detection"))
        self.menuMorfologi.setTitle(_translate("WijangNabil", "Morfologi"))
        self.btn_open.setText(_translate("WijangNabil", "Open"))
        self.btn_save.setText(_translate("WijangNabil", "Save as"))
        self.actionExit.setText(_translate("WijangNabil", "Exit"))
        self.actionAverage.setText(_translate("WijangNabil", "Average"))
        self.actionLightness.setText(_translate("WijangNabil", "Lightness"))
        self.actionLuminosity.setText(_translate("WijangNabil", "Luminosity"))
        self.actionInverse.setText(_translate("WijangNabil", "Inverse"))
        self.btn_exit.setText(_translate("WijangNabil", "Exit"))
        self.actionAbout.setText(_translate("WijangNabil", "About "))
        self.Btn_brightness.setText(_translate("WijangNabil", "Brightness"))
        self.Btn_contrast.setText(_translate("WijangNabil", "Contrast"))
        self.actionCropping.setText(_translate("WijangNabil", "Crop"))
        self.actionHorizontal.setText(_translate("WijangNabil", "Horizontal"))

    def open_folder2(self):
        options = QFileDialog.Options()
        options = QFileDialog.ReadOnly
        self.LbOutput.clear()

        file_name, _ = QFileDialog.getOpenFileName(None,"Open Image File","",
                                                "Images(*.png *.jpg *jpeg);;All Files(*)", options=options)
        if file_name:
            image = QtGui.QImage(file_name)
            if not image.isNull():
                pixmap = QtGui.QPixmap.fromImage(image)
                self.LbInput.setPixmap(pixmap)
                self.path_img.setText(file_name)

                # luminance_image = image.copy()  # Copy the original image
                # for y in range(pixmap.height()):
                #     for x in range(pixmap.width()):
                #         pixel = pixmap.toImage().pixel(x, y)
                #         color = QColor(pixel)
                #         red = color.red()
                #         green = color.green()
                #         blue = color.blue()
                #         gamma = 1.04

                #         # Calculate luminance
                #         luminance = int(0.299 * red **gamma + 0.587 * green ** gamma + 0.114 * blue ** gamma )
                #         luminanceR =int( 0.299 * red **gamma) 
                #         luminanceG = int(0.587 * green ** gamma)
                #         luminanceB = int(0.114 * blue ** gamma)

                #         # Set the pixel to grayscale
                #         grayscale_color = QColor(luminance,luminance,luminance)
                #         luminance_image.setPixelColor(x, y, grayscale_color)

                # Display the luminance image
                # pixmap = QtGui.QPixmap.fromImage(luminance_image)
                
               

                self.LbInput.setScaledContents(True)
                # self.LbOutput.setPixmap(pixmap)
                # self.LbOutput.setScaledContents(True)

    #FUngsi untuk merubah gambar yang ditampilkan di label input menjadi grayscale dan 
    #ditampilkan ke label output
    def changeLuminance(self):
        pixmap = self.LbInput.pixmap()

        if pixmap :
            img = pixmap.toImage()
            
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel),QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    gamma = 1.04
                    luminance = int(0.299 * r  + 0.587 * g  + 0.114 * b )
                    img.setPixel(x,y, qRgb(luminance, luminance, luminance))

            luminance_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(luminance_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = luminance_pixmap

    def changeAverage(self):
        pixmap = self.LbInput.pixmap()
        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel),QtGui.qGreen(pixel),  QtGui.qBlue(pixel)
                    konstanta = 3
                    average = (r+g+b) // konstanta
                    img.setPixel(x, y, qRgb(average,average,average))
            
            average_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(average_pixmap)
            self.LbOutput.setScaledContents(True)                                                
            self.displayed_pixmap = average_pixmap
    
    def changeLightness(self):
        pixmap = self.LbInput.pixmap()
        if pixmap :
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x, y)
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    konstanta = 2
                    lightness = (max(r,g,b) + min(r,g,b)) // konstanta
                    img.setPixel(x,y,qRgb(lightness,lightness,lightness))
            
            lightness_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(lightness_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = lightness_pixmap

    def changeInvert(self):
        pixmap = self.LbInput.pixmap()
        if pixmap: 
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    invert = qRgb(255 - r, 255-g, 255-b)
                    img.setPixel(x,y,invert)
            
            invert_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(invert_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = invert_pixmap

    def changeBrightness(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)
                    kons_bright = 100
                    r, g, b = QtGui.qRed(pixel), QtGui.qGreen(pixel), QtGui.qBlue(pixel)
                    new_r = min(255, int(r * kons_bright))
                    new_g = min(255, int(g * kons_bright))
                    new_b = min(255, int(b * kons_bright))
                    brightness = QColor(new_r , new_g , new_b ).rgba()
                    img.setPixel(x,y,brightness)

        brightness_pixmap = QPixmap.fromImage(img)
        self.LbOutput.setPixmap(brightness_pixmap)
        self.LbOutput.setScaledContents(True)
        self.displayed_pixmap = brightness_pixmap

    def changeContrast(self):
        pixmap = self.LbInput.pixmap()

        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixelColor = QColor(img.pixel(x,y))

                    rata_rata = (pixelColor.red() + pixelColor.green() + pixelColor.blue()) //3

                    delta_r = pixelColor.red() - rata_rata
                    delta_g = pixelColor.green() - rata_rata
                    delta_b = pixelColor.blue() - rata_rata 

                    konst_constrast = 5

                    new_r = int(rata_rata + konst_constrast * delta_r)
                    new_g = int(rata_rata + konst_constrast * delta_g)
                    new_b = int(rata_rata + konst_constrast * delta_b)
                    
                    new_r = max(0, min(255, new_r))
                    new_g = max(0, min(255, new_g))
                    new_b = max(0, min(255, new_b))

                    pixelColor.setRed(new_r)
                    pixelColor.setGreen(new_g)
                    pixelColor.setBlue(new_b)

                    img.setPixel(x,y,pixelColor.rgb())
    
            contrast_pixmap = QPixmap.fromImage(img)
            self.LbOutput.setPixmap(contrast_pixmap)
            self.LbOutput.setScaledContents(True)
            self.displayed_pixmap = contrast_pixmap
    
    
    def flipHorizontal(self):
        pixmap = self.LbInput.pixmap()
        
        if pixmap:
            img = pixmap.toImage()
            for x in range(img.width()):
                for y in range(img.height()):
                    pixel = img.pixel(x,y)

                    

    
    #Fungsi untuk mengakhiri program
    def exitProgram(self):
        WijangNabil.close()
    
    #fungsi untuk menyimpan file
    def saveImage(self):
        if hasattr(self, 'image'):
            saveFile = QtWidgets.QFileDialog()
            saveFile.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
            saveFile.setNameFilter("JPG File(*.jpg);; PNG FIles(*.png)")

            if saveFile.exec_() == QtWidgets.QDialog.Accepted:
                save_path = saveFile.selectedFiles()[0]
                self.displayed_pixmap.save(save_path)
    
    # def masukAritTambah(self, checked):
     

    
       


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WijangNabil = QtWidgets.QMainWindow()
    ui = Ui_WijangNabil()
    ui.setupUi(WijangNabil)
    WijangNabil.show()
    sys.exit(app.exec_())
